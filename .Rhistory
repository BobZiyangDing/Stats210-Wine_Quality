qqnorm(data$resid, main="Normal QQ Plot of Residuals")
qqline(data$resid, col="red")
data <- data %>% mutate(leverage = hatvalues(final.model), cooks =
cooks.distance(final.model), stand.resid = rstandard(final.model), obs.num =
row_number())
# calculate leverage threshold
t <- 2*10/1599
# leverage
ggplot(data=data, aes(x=obs.num, y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=t, color="red") +
labs(x="Observation Number", y="Leverage", title="Leverage")
#data %>% filter(leverage > 0.3) %>%
#select(citric.acid, residual.sugarCent, free.sulfur.dioxideCent, sulphatesCent, densityCent, alcoholCent)
# Cookâs Distance
ggplot(data=data, aes(x=obs.num, y=cooks)) +
geom_point() +
geom_hline(yintercept=1, color="red")+
labs(x="Observation Number", y="Cook's Distance", title="Cook's Distance")
# standardized residuals
p1 <- ggplot(data=data, aes(x=predicted, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p2 <- ggplot(data=data, aes(x=residual.sugarCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p3 <- ggplot(data=data, aes(x=citric.acid, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p4 <- ggplot(data=data, aes(x=free.sulfur.dioxideCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p5 <- ggplot(data=data, aes(x=sulphatesCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p6 <- ggplot(data=data, aes(x=densityCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p7 <- ggplot(data=data, aes(x=alcoholCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
plot_grid(p1, p2, p3, p4, p5, p6, p7, ncol=2, nrow=4)
kable(tidy(vif(final.model)))
# compare model from stepwise selection with final model from backward selection
stepwise_new <- ols_step_both_aic(model1, details=TRUE)
# view the stepwise AIC backward elimination
plot(stepwise_new)
rawdata <- read.csv("./redwine_quality.csv")
data$quality <- rawdata$quality
data$quality[data$quality < 6] <- 0
data$quality[data$quality >= 6] <- 1
# Model Reduced
modellg1.null <- glm(quality ~ 1, data=data , family=binomial)
# Model Full
modellg1.full <- glm(quality ~ volatile.acidityCent  + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + pHCent + alcoholCent,data=data, family = binomial)
# forward Selection
step(modellg1.null,scope=list(upper=modellg1.full),direction="forward")
modellg1.selected <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + densityCent,data=data, family = binomial)
summary(modellg1.selected)
kable(tidy(modellg1.selected))
modellg1.final <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid,data=data, family = binomial)
summary(modellg1.final)
kable(tidy(modellg1.final))
kable(tidy(vif(modellg1.final)))
data$pred <- predict.glm(modellg1.final)
data$res <- residuals.glm(modellg1.final)
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$sulphatesCent,y=data$res,xlab="sulphatesCent")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
avPlots(modellg1.final)
cutoff <- cooks.distance(modellg1.final)
plot(modellg1.final, which=4, cook.levels=cutoff)
influencePlot(modellg1.final,	 main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
data <- data %>%
mutate(leverage = hatvalues(modellg1.final),
cooks = cooks.distance(modellg1.final),
stand.resid = rstandard(modellg1.final),
obs.num = row_number())
p3 <- ggplot(data=data, aes(x=obs.num,y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=0.1,color="red")+
labs(x="Observation Number",y="Leverage",title="Leverage")
p4 <- ggplot(data=data, aes(x=obs.num,y=cooks)) +
geom_point() +
geom_hline(yintercept=1,color="red")+
labs(x="Observation Number",y="Cook's Distance",title="Cook's Distance")
plot_grid(p3,p4,ncol = 2)
# interaction effects with change in deviance test
modellg1.final <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid,data=data, family = binomial)
modellg2 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*volatile.acidityCent, data=data, family = binomial)
modellg3 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*sulphatesCent, data=data, family = binomial)
modellg4 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + volatile.acidityCent*sulphatesCent, data=data, family = binomial)
tidy(anova(modellg1.final,modellg2,test="Chisq"))
tidy(anova(modellg1.final,modellg3,test="Chisq"))
tidy(anova(modellg1.final,modellg4,test="Chisq"))
#final logistic regression model
final.model.lg <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*sulphatesCent, data=data, family = binomial)
summary(final.model.lg)
#reload the data because quality was taken as binary in logistic
data <- data %>% mutate(quality_dup=quality)
data$quality_dup <- rawdata$quality
## create separate indicator variables for each level of quality to use in binned plots
data <- data %>% mutate(qua0 = if_else(quality_dup=="0",1,0),
qua1 = if_else(quality_dup=="1",1,0),
qua2 = if_else(quality_dup=="2",1,0),
qua3 = if_else(quality_dup=="3",1,0),
qua4 = if_else(quality_dup=="4",1,0),
qua5 = if_else(quality_dup=="5",1,0),
qua6 = if_else(quality_dup=="6",1,0),
qua7 = if_else(quality_dup=="7",1,0),
qua8 = if_else(quality_dup=="8",1,0),
qua9 = if_else(quality_dup=="9",1,0),
qua10 = if_else(quality_dup=="10",1,0))
data <- data %>% mutate(quality_dup=as.factor(quality_dup))
m1 <- polr(quality_dup ~ volatile.acidityCent + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + pHCent + alcoholCent, data=data)
summary(m1)
kable(tidy(m1),format="markdown",digits=3)
#parameter estimates with confidence level
confint.default(m1)
m2 <- polr(quality_dup ~ volatile.acidityCent + citric.acid + chloridesCent + sulphatesCent + pHCent + alcoholCent, data=data)
summary(m2)
confint.default(m2)
#get odds ratios
exp(coef(m2))
## OR and CI
ci <- confint(m2)
exp(cbind(OR = coef(m2), ci))
# calculate predicted probabilities for each observation
predprobs <- data.frame(predict(m2,type="probs"))
predprobs %>% filter(row_number() <= 3) #print predictions for first three observations
# predicted categories
data <- data %>% mutate(pred.comp = predict(m2,type="class")) # get predicted categories
result <- data %>% group_by(pred.comp,quality_dup) %>% summarise(n=n()) # summarise actual vs. predicted
kable(spread(result,quality_dup,n),format="markdown") # print actual vs. predicted categories
data <- data %>% mutate(resid3 = qua3-predprobs[,1],
resid4 = qua4-predprobs[,2],
resid5 = qua5-predprobs[,3],
resid6 = qua6-predprobs[,4],
resid7 = qua7-predprobs[,5],
resid8 = qua8-predprobs[,6])
dat$pred <- predict(m2, data)
data$pred <- predict(m2, data)
# binned plots of residuals
par(mfrow=c(2,3))
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid3,xlab="volatile.acidityCent")
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid4,xlab="volatile.acidityCent")
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid5,xlab="volatile.acidityCent")
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid6,xlab="volatile.acidityCent")
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid7,xlab="volatile.acidityCent")
arm::binnedplot(x=data$volatile.acidityCent,y=data$resid8,xlab="volatile.acidityCent")
View(data)
data$predor <- predict(m2, data)
View(data)
View(data)
par(mfrow=c(2,3))
arm::binnedplot(x=data$predor,y=data$resid3,xlab="predict")
summary(data$predor,data$quality)
data %>% count(predor,quality)
data %>% count(predor,quality_dup)
accuracy <- count(predor==quality_dup)/count(predor!=quality_dup)
accuracy <- count(predor==quality_dup)/count(predor!=quality_dup)
data %>% count(predor,quality_dup)
confusionMatrix(data$predor,data$quality_dup)
??confusionMatrix_tidiers
confusionMatrix_tiders(data$predor,data$quality_dup)
broom::confusionMatrix_tiders(data$predor,data$quality_dup)
library("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library("caret")
install.packages("rlang")
install.packages("rlang")
library("caret")
install.packages("rlang")
install.packages("rlang")
library("caret")
data %>% count(predor,quality_dup)
broom::confusionMatrix_tiders(data$predor,data$quality_dup)
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
#library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
# input data source
data <- read.csv("./redwine_quality.csv")
# convert quality into factor variable
data <- data %>% mutate(quality = as.factor(quality))
# overview of the dataset
kable(tidy(summary(data)))
# scatter plot matrix one
pairs(quality ~ fixed.acidity + volatile.acidity + citric.acid + density + residual.sugar + chlorides, data=data)
# correlation coefficients for potential multicollinearity
cor(data$fixed.acidity, data$citric.acid)
cor(data$fixed.acidity, data$density)
cor(data$volatile.acidity, data$citric.acid)
cor(data$density, data$residual.sugar)
# scatter plot matrix two
pairs(quality ~ free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data=data)
# correlation coefficients for potential multicollinearity
cor(data$free.sulfur.dioxide, data$total.sulfur.dioxide)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p3  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p9  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p11 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p12 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p3,p4,p5,p6,p7,p9,p10,p11,p12,ncol = 4,nrow = 3)
# log transform the citric.aci, free.sulfure.dioxide, and alcohol
# data$citric.acid <- log(15*data$citric.acid+1)
data$free.sulfur.dioxide<- log(data$free.sulfur.dioxide)
data$alcohol <- log(data$alcohol)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p3  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p9  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p11 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p12 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p3,p4,p5,p6,p7,p9,p10,p11,p12,ncol = 4,nrow = 3)
# summary statistics of each variable
summary(data)
# makes quality==5 the reference level
data <- data %>% mutate(quality = relevel(quality, ref=5))
# distribution of citric acid
ggplot(aes(x=citric.acid), data=data) +
geom_histogram(fill="steelblue2", color="black") +
ggtitle("Distribution of Citric Acid") +
theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5))
# add mean-centered numerical variables besides citric.acid
data <- data %>%
mutate(volatile.acidityCent = volatile.acidity-mean(volatile.acidity),
residual.sugarCent = residual.sugar-mean(residual.sugar),
chloridesCent = chlorides-mean(chlorides),
free.sulfur.dioxideCent = free.sulfur.dioxide-mean(free.sulfur.dioxide),
sulphatesCent = sulphates-mean(sulphates),
densityCent = density-mean(density), pHCent = pH-mean(pH),
alcoholCent = alcohol-mean(alcohol))
# change quality into a numerical variable
data <- data %>% mutate(quality = as.numeric(quality))
# primary model
full.model <- lm(quality ~ volatile.acidityCent + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + pHCent + alcoholCent, data=data)
# view the primary model
kable(tidy(full.model), format="markdown")
# check model fit
glance(full.model)
# backward selection process
backward <- ols_step_backward_aic(full.model, details=TRUE)
# view stepwise AIC backward elimination
plot(backward)
# forward selection process
forward <- ols_step_forward_aic(full.model, details=TRUE)
# view stepwise AIC forward selection
plot(forward)
# stepwise selection process
stepwise <- ols_step_both_aic(full.model, details=TRUE)
# view stepwise AIC two-direction selection
plot(stepwise)
# new model from model selection
selected <- lm(quality ~ residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent, data=data)
# view coefficients of the new model
kable(tidy(selected), format="markdown")
# model after removing chloridesCent
model <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent, data=data)
# view the model
kable(tidy(model), format="markdown")
# multicollinearity check
kable(tidy(vif(model)))
# interaction effects with residual.sugarCent
model_rs <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent + residual.sugarCent*citric.acid + residual.sugarCent*free.sulfur.dioxideCent + residual.sugarCent*sulphatesCent + residual.sugarCent*densityCent + residual.sugarCent*alcoholCent, data=data)
# Nested F Test for interaction with residual.sugarCent
ano1 <- anova(model_rs, model)
kable(tidy(ano1))
# Nested F Test for interaction effect between alcohol and density
model_da <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent + alcoholCent*densityCent, data=data)
ano2 <- anova(model_da, model)
kable(tidy(ano2))
# Nested F Test for all other two-way interactions
model1 <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent + citric.acid*free.sulfur.dioxideCent + citric.acid*sulphatesCent + citric.acid*densityCent + citric.acid*alcoholCent + free.sulfur.dioxideCent*sulphatesCent + free.sulfur.dioxideCent*densityCent + free.sulfur.dioxideCent*alcoholCent + sulphatesCent*densityCent + sulphatesCent*alcoholCent, data=data)
ano3 <- anova(model1, model)
kable(tidy(ano3))
# backward selection
backward_new <- ols_step_backward_aic(model1, details=TRUE)
# view the stepwise AIC backward elimination
plot(backward_new)
# new model after backward selection
model2 <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent + citric.acid*free.sulfur.dioxideCent + citric.acid*sulphatesCent + free.sulfur.dioxideCent*alcoholCent + sulphatesCent*alcoholCent, data=data)
kable(tidy(model2), format="markdown")
# make model2 the final multiple regression model
final.model <- lm(quality ~ residual.sugarCent + citric.acid + free.sulfur.dioxideCent + sulphatesCent + densityCent + alcoholCent + citric.acid*free.sulfur.dioxideCent + citric.acid*sulphatesCent + free.sulfur.dioxideCent*alcoholCent + sulphatesCent*alcoholCent, data=data)
data <- data %>% mutate(predicted = predict.lm(final.model))
data <- data %>% mutate(resid=resid(final.model))
ggplot(data, aes(predicted, resid)) + geom_point() +
geom_hline(yintercept=0, color="red") + labs(x="Predicted Values", y="Residuals",
title="Residuals vs. Fitted Values") + theme(plot.title=element_text(hjust=0.5,
size=10))
# distribution of residuals
ggplot(data, aes(resid)) + geom_histogram(color="black",
fill="steelblue2") + labs(x="residuals", y="count", title="Histogram of Residuals") +
theme(plot.title=element_text(hjust=0.5, size=10))
# QQ Plot
qqnorm(data$resid, main="Normal QQ Plot of Residuals")
qqline(data$resid, col="red")
data <- data %>% mutate(leverage = hatvalues(final.model), cooks =
cooks.distance(final.model), stand.resid = rstandard(final.model), obs.num =
row_number())
# calculate leverage threshold
t <- 2*10/1599
# leverage
ggplot(data=data, aes(x=obs.num, y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=t, color="red") +
labs(x="Observation Number", y="Leverage", title="Leverage")
#data %>% filter(leverage > 0.3) %>%
#select(citric.acid, residual.sugarCent, free.sulfur.dioxideCent, sulphatesCent, densityCent, alcoholCent)
# Cookâs Distance
ggplot(data=data, aes(x=obs.num, y=cooks)) +
geom_point() +
geom_hline(yintercept=1, color="red")+
labs(x="Observation Number", y="Cook's Distance", title="Cook's Distance")
# standardized residuals
p1 <- ggplot(data=data, aes(x=predicted, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p2 <- ggplot(data=data, aes(x=residual.sugarCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p3 <- ggplot(data=data, aes(x=citric.acid, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p4 <- ggplot(data=data, aes(x=free.sulfur.dioxideCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p5 <- ggplot(data=data, aes(x=sulphatesCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p6 <- ggplot(data=data, aes(x=densityCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
p7 <- ggplot(data=data, aes(x=alcoholCent, y=stand.resid)) + geom_point()+  geom_hline(yintercept=0, color="red")
plot_grid(p1, p2, p3, p4, p5, p6, p7, ncol=2, nrow=4)
kable(tidy(vif(final.model)))
# compare model from stepwise selection with final model from backward selection
stepwise_new <- ols_step_both_aic(model1, details=TRUE)
# view the stepwise AIC backward elimination
plot(stepwise_new)
rawdata <- read.csv("./redwine_quality.csv")
data$quality <- rawdata$quality
data$quality[data$quality < 6] <- 0
data$quality[data$quality >= 6] <- 1
# Model Reduced
modellg1.null <- glm(quality ~ 1, data=data , family=binomial)
# Model Full
modellg1.full <- glm(quality ~ volatile.acidityCent  + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + pHCent + alcoholCent,data=data, family = binomial)
# forward Selection
step(modellg1.null,scope=list(upper=modellg1.full),direction="forward")
modellg1.selected <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + densityCent,data=data, family = binomial)
summary(modellg1.selected)
kable(tidy(modellg1.selected))
modellg1.final <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid,data=data, family = binomial)
summary(modellg1.final)
kable(tidy(modellg1.final))
kable(tidy(vif(modellg1.final)))
data$pred <- predict.glm(modellg1.final)
data$res <- residuals.glm(modellg1.final)
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$sulphatesCent,y=data$res,xlab="sulphatesCent")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
avPlots(modellg1.final)
cutoff <- cooks.distance(modellg1.final)
plot(modellg1.final, which=4, cook.levels=cutoff)
influencePlot(modellg1.final,	 main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
data <- data %>%
mutate(leverage = hatvalues(modellg1.final),
cooks = cooks.distance(modellg1.final),
stand.resid = rstandard(modellg1.final),
obs.num = row_number())
p3 <- ggplot(data=data, aes(x=obs.num,y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=0.1,color="red")+
labs(x="Observation Number",y="Leverage",title="Leverage")
p4 <- ggplot(data=data, aes(x=obs.num,y=cooks)) +
geom_point() +
geom_hline(yintercept=1,color="red")+
labs(x="Observation Number",y="Cook's Distance",title="Cook's Distance")
plot_grid(p3,p4,ncol = 2)
# interaction effects with change in deviance test
modellg1.final <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid,data=data, family = binomial)
modellg2 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*volatile.acidityCent, data=data, family = binomial)
modellg3 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*sulphatesCent, data=data, family = binomial)
modellg4 <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + volatile.acidityCent*sulphatesCent, data=data, family = binomial)
tidy(anova(modellg1.final,modellg2,test="Chisq"))
tidy(anova(modellg1.final,modellg3,test="Chisq"))
tidy(anova(modellg1.final,modellg4,test="Chisq"))
#final logistic regression model
final.model.lg <- glm(quality ~ alcoholCent  + volatile.acidityCent + sulphatesCent + chloridesCent + free.sulfur.dioxideCent + citric.acid + alcoholCent*sulphatesCent, data=data, family = binomial)
summary(final.model.lg)
#reload the data because quality was taken as binary in logistic
data <- data %>% mutate(quality_dup=quality)
data$quality_dup <- rawdata$quality
## create separate indicator variables for each level of quality to use in binned plots
data <- data %>% mutate(qua0 = if_else(quality_dup=="0",1,0),
qua1 = if_else(quality_dup=="1",1,0),
qua2 = if_else(quality_dup=="2",1,0),
qua3 = if_else(quality_dup=="3",1,0),
qua4 = if_else(quality_dup=="4",1,0),
qua5 = if_else(quality_dup=="5",1,0),
qua6 = if_else(quality_dup=="6",1,0),
qua7 = if_else(quality_dup=="7",1,0),
qua8 = if_else(quality_dup=="8",1,0),
qua9 = if_else(quality_dup=="9",1,0),
qua10 = if_else(quality_dup=="10",1,0))
data <- data %>% mutate(quality_dup=as.factor(quality_dup))
m1 <- polr(quality_dup ~ volatile.acidityCent + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + sulphatesCent + densityCent + pHCent + alcoholCent, data=data)
summary(m1)
kable(tidy(m1),format="markdown",digits=3)
#parameter estimates with confidence level
confint.default(m1)
m2 <- polr(quality_dup ~ volatile.acidityCent + citric.acid + chloridesCent + sulphatesCent + pHCent + alcoholCent, data=data)
summary(m2)
confint.default(m2)
#get odds ratios
exp(coef(m2))
## OR and CI
ci <- confint(m2)
exp(cbind(OR = coef(m2), ci))
# calculate predicted probabilities for each observation
predprobs <- data.frame(predict(m2,type="probs"))
predprobs %>% filter(row_number() <= 3) #print predictions for first three observations
# predicted categories
data <- data %>% mutate(pred.comp = predict(m2,type="class")) # get predicted categories
result <- data %>% group_by(pred.comp,quality_dup) %>% summarise(n=n()) # summarise actual vs. predicted
kable(spread(result,quality_dup,n),format="markdown") # print actual vs. predicted categories
data <- data %>% mutate(resid3 = qua3-predprobs[,1],
resid4 = qua4-predprobs[,2],
resid5 = qua5-predprobs[,3],
resid6 = qua6-predprobs[,4],
resid7 = qua7-predprobs[,5],
resid8 = qua8-predprobs[,6])
data$predor <- predict(m2, data)
data %>% count(predor,quality_dup)
broom::confusionMatrix_tiders(data$predor,data$quality_dup)
coeftest(m2)
data %>% count(predor,quality_dup)
confusionMatrix(data$predor,data$quality_dup)
install.packages("e1071")
confusionMatrix(data$predor,data$quality_dup)
tidy(confusionMatrix(data$predor,data$quality_dup))
confusionMatrix(data$predor,data$quality_dup)
memory.limit()
bigint <- integer(2^32 / 4)
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("nnet")
gss <- read_csv("https://raw.githubusercontent.com/matackett/sta210/master/data/gss2010.csv")
gss$natmass <- as.factor(gss$natmass)
gss$natmass <- relevel(gss$natmass, ref ="About Right")
gss <- gss %>%
mutate(polviews=factor(polviews,levels=c("Extremely Liberal","Liberal","Slightly Liberal",
"Moderate","Slightly Conservative",
"Conservative","Extremely Conservative")))
summary(gss$polviews)
gss$ageCent <- gss$age - mean(gss$age)
gss$seiCent <- gss$sei - mean(gss$sei)
model1 <- multinom(natmass ~ ageCent + sex + seiCent + region, data=gss)
kable(tidy(model1),format="markdown")
model2 <- multinom(natmass ~ ageCent + sex + seiCent + region + polviews, data=gss)
kable(tidy(model2),format="markdown")
test <- anova(model1, model2)
test
predprobs <- data.frame(pred = predict(model2,type="probs"))
gss <- gss %>%
mutate(aboutright = if_else(gss$natmass=="About Right",1,0),
toomuch = if_else(gss$natmass=="Too Much",1,0),
toolittle = if_else(gss$natmass=="Too Little",1,0))
gss <- gss %>%
mutate(aboutright.resid = aboutright - predprobs$pred.About.Right,
toomuch.resid = toomuch- predprobs$pred.Too.Much,
toolittle.resid = toolittle - predprobs$pred.Too.Little)
binnedplot(x=gss$age,y=gss$aboutright.resid,xlab="age",ylab="residual")
binnedplot(x=gss$age,y=gss$toolittle.resid,xlab="age",ylab="residual")
binnedplot(x=gss$age,y=gss$toomuch.resid,xlab="age",ylab="residual")
binnedplot(x=gss$sei,y=gss$aboutright.resid,xlab="age",ylab="residual")
binnedplot(x=gss$sei,y=gss$toolittle.resid,xlab="age",ylab="residual")
binnedplot(x=gss$sei,y=gss$toomuch.resid,xlab="age",ylab="residual")
gss %>% group_by(sex) %>%
summarise(aboutright.avg = mean(aboutright.resid),
toomuch.avg = mean(toomuch.resid),
toolittle.avg=mean(toolittle.resid))
gss %>% group_by(region) %>%
summarise(aboutright.avg = mean(aboutright.resid),
toomuch.avg = mean(toomuch.resid),
toolittle.avg=mean(toolittle.resid))
gss %>% group_by(polviews) %>%
summarise(aboutright.avg = mean(aboutright.resid),
toomuch.avg = mean(toomuch.resid),
toolittle.avg=mean(toolittle.resid))
summary(model2)
tidy(summary(model2))
kable(summary(model2))
summary(model2)
