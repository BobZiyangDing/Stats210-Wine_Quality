x <- data.frame("alcoholCent"= data$alcoholCent,
"volatile.acidityCent"=data$volatile.acidityCent,
"sulphatesCent"=data$sulphatesCent,
"chloridesCent"=data$chloridesCent,
"free.sulfur.dioxideCent"=data$free.sulfur.dioxideCent,
"citric.acid"=data$citric.acid,
"alcoholCent:sulphatesCent"=data$alcoholCent*data$sulphatesCent)
x <- as.matrix(x)
library("tsne")
datatsne <- tsne(x,max_iter=500,  k=2, perplexity=50)
datatsne <- data.frame(datatsne)
datatsne$quality <- as.factor(data$quality)
ggplot(data=datatsne, aes(x=X1,y=X2,color=quality))+geom_point()
x <- data.frame("quality"=data$quality,
"alcoholCent"= data$alcoholCent,
"volatile.acidityCent"=data$volatile.acidityCent,
"sulphatesCent"=data$sulphatesCent,
"chloridesCent"=data$chloridesCent,
"free.sulfur.dioxideCent"=data$free.sulfur.dioxideCent,
"citric.acid"=data$citric.acid,
"alcoholCent:sulphatesCent"=data$alcoholCent*data$sulphatesCent)
x <- as.matrix(x)
library("tsne")
datatsne <- tsne(x,max_iter=500,  k=2, perplexity=50)
datatsne <- data.frame(datatsne)
datatsne$quality <- as.factor(data$quality)
ggplot(data=datatsne, aes(x=X1,y=X2,color=quality))+geom_point()
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
library("tsne")
# input data source
data <- read.csv("./redwine_quality.csv")
# overview of the dataset
glimpse(data)
# convert quality into factor variable
data <- data %>% mutate(quality = as.factor(quality))
# duplicate quality for ordinal regresison
data <- data %>% mutate(quality_dup = as.factor(quality))
# scatter plot matrix one
pairs(quality ~ fixed.acidity + volatile.acidity + citric.acid + density + residual.sugar + chlorides, data=data)
# correlation coefficients for potential multicollinearity
cor(data$fixed.acidity, data$citric.acid)
cor(data$fixed.acidity, data$density)
cor(data$volatile.acidity, data$citric.acid)
cor(data$density, data$residual.sugar)
# scatter plot matrix two
pairs(quality ~ free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data=data)
# correlation coefficients for potential multicollinearity
cor(data$free.sulfur.dioxide, data$total.sulfur.dioxide)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p2  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p3  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p8 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p9 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,ncol=4,nrow=3)
# log transform sulphates
data <- data %>% mutate(log_sulphates = log(sulphates))
# distribution of the log transformed sulphates
ggplot(data = data, aes(x = log_sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
# summary statistics of each variable
summary(data)
# makes quality==5 the reference level
data <- data %>% mutate(quality = relevel(quality, ref=5))
# add mean-centered numerical variables besides citric.acid
data <- data %>%
mutate(volatile.acidityCent = volatile.acidity-mean(volatile.acidity),
residual.sugarCent = residual.sugar-mean(residual.sugar),
chloridesCent = chlorides-mean(chlorides),
free.sulfur.dioxideCent = free.sulfur.dioxide-mean(free.sulfur.dioxide),
sulphatesCent = sulphates-mean(sulphates)
densityCent = density-mean(density), pHCent = pH-mean(pH),
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
library("tsne")
# input data source
data <- read.csv("./redwine_quality.csv")
# overview of the dataset
glimpse(data)
# convert quality into factor variable
data <- data %>% mutate(quality = as.factor(quality))
# duplicate quality for ordinal regresison
data <- data %>% mutate(quality_dup = as.factor(quality))
# scatter plot matrix one
pairs(quality ~ fixed.acidity + volatile.acidity + citric.acid + density + residual.sugar + chlorides, data=data)
# correlation coefficients for potential multicollinearity
cor(data$fixed.acidity, data$citric.acid)
cor(data$fixed.acidity, data$density)
cor(data$volatile.acidity, data$citric.acid)
cor(data$density, data$residual.sugar)
# scatter plot matrix two
pairs(quality ~ free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data=data)
# correlation coefficients for potential multicollinearity
cor(data$free.sulfur.dioxide, data$total.sulfur.dioxide)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p2  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p3  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p8 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p9 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,ncol=4,nrow=3)
# log transform sulphates
data <- data %>% mutate(log_sulphates = log(sulphates))
# distribution of the log transformed sulphates
ggplot(data = data, aes(x = log_sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
# summary statistics of each variable
summary(data)
# makes quality==5 the reference level
data <- data %>% mutate(quality = relevel(quality, ref=5))
# add mean-centered numerical variables besides citric.acid
data <- data %>%
mutate(volatile.acidityCent = volatile.acidity-mean(volatile.acidity),
residual.sugarCent = residual.sugar-mean(residual.sugar),
chloridesCent = chlorides-mean(chlorides),
free.sulfur.dioxideCent = free.sulfur.dioxide-mean(free.sulfur.dioxide),
sulphatesCent = sulphates-mean(sulphates)
densityCent = density-mean(density), pHCent = pH-mean(pH),
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
library("tsne")
# input data source
data <- read.csv("./redwine_quality.csv")
# overview of the dataset
glimpse(data)
# convert quality into factor variable
data <- data %>% mutate(quality = as.factor(quality))
# duplicate quality for ordinal regresison
data <- data %>% mutate(quality_dup = as.factor(quality))
# scatter plot matrix one
pairs(quality ~ fixed.acidity + volatile.acidity + citric.acid + density + residual.sugar + chlorides, data=data)
# correlation coefficients for potential multicollinearity
cor(data$fixed.acidity, data$citric.acid)
cor(data$fixed.acidity, data$density)
cor(data$volatile.acidity, data$citric.acid)
cor(data$density, data$residual.sugar)
# scatter plot matrix two
pairs(quality ~ free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data=data)
# correlation coefficients for potential multicollinearity
cor(data$free.sulfur.dioxide, data$total.sulfur.dioxide)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p2  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p3  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p8 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p9 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,ncol=4,nrow=3)
# log transform sulphates
data <- data %>% mutate(log_sulphates = log(sulphates))
# distribution of the log transformed sulphates
ggplot(data = data, aes(x = log_sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
# summary statistics of each variable
summary(data)
# makes quality==5 the reference level
data <- data %>% mutate(quality = relevel(quality, ref=5))
# add mean-centered numerical variables besides citric.acid
data <- data %>%
mutate(volatile.acidityCent = volatile.acidity-mean(volatile.acidity),
residual.sugarCent = residual.sugar-mean(residual.sugar),
chloridesCent = chlorides-mean(chlorides),
free.sulfur.dioxideCent = free.sulfur.dioxide-mean(free.sulfur.dioxide),
sulphatesCent = sulphates-mean(sulphates),
densityCent = density-mean(density), pHCent = pH-mean(pH),
alcoholCent = alcohol-mean(alcohol))
# transform quality into a binary variable
rawdata <- read.csv("./redwine_quality.csv")
data$quality <- rawdata$quality
data$quality[data$quality < 6] <- 0    # any quality less than 6 is 0 (not good)
data$quality[data$quality >= 6] <- 1   # quality equal to or greater than 6 so 6-10 is 1 (good)
# Model Reduced
modellg1.null <- glm(quality ~ 1, data=data , family=binomial)
# Model Full
modellg1.full <- glm(quality ~ volatile.acidityCent + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + log_sulphates + densityCent + pHCent + alcoholCent, data=data, family = binomial)
# forward Selection
step(modellg1.null, scope=list(upper=modellg1.full), direction="forward")
# model based on forward selection
modellg1.final <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent, data=data, family = binomial)
summary(modellg1.final)
# view coefficients of the selected model - the final model with main effects
kable(tidy(modellg1.final))
# calculate predicted probabilities
data$pred <- predict.glm(modellg1.final, type="response")
# calculate residuals of predicted probabilities
data$res <- residuals.glm(modellg1.final, type="response")
# binned residual plots
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$log_sulphates,y=data$res,xlab="log_sulphates")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
binnedplot(x=data$pHCent,y=data$res,xlab="pHCent")
# use AV Plot to identify prblematic observations
avPlots(modellg1.final)
# influence points
data <- data %>%
mutate(leverage = hatvalues(modellg1.final),
cooks = cooks.distance(modellg1.final),
stand.resid = rstandard(modellg1.final),
obs.num = row_number())
# Cook's Distance
cutoff <- cooks.distance(modellg1.final)
plot(modellg1.final, which=4, cook.levels=cutoff)
# influence plot
influencePlot(modellg1.final, main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
# leverage threshold
threshold <- 0.05
# leverage and cook's distance plots
p1 <- ggplot(data=data, aes(x=obs.num,y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=threshold,color="red")+
labs(x="Observation Number",y="Leverage",title="Leverage")
p2 <- ggplot(data=data, aes(x=obs.num,y=cooks)) +
geom_point() +
geom_hline(yintercept=1,color="red")+
labs(x="Observation Number",y="Cook's Distance",title="Cook's Distance")
plot_grid(p1,p2,ncol = 2)
# multicollinearity
kable(tidy(vif(modellg1.final)))
# ROC Curve
ROC.quality <- roc(data$quality, data$pred, plot=T)
# area under the curve
ROC.quality$auc
# interaction effects with volatile.acidityCent using change in deviance test
# the final logistic regression model
modellg1.final <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent, data=data, family = binomial)
# new model for two-way interaction effects with volatile.acidityCent
modellg1 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*volatile.acidityCent + volatile.acidityCent*log_sulphates + volatile.acidityCent*chloridesCent + volatile.acidityCent*free.sulfur.dioxideCent + volatile.acidityCent*citric.acid + volatile.acidityCent*pHCent, data=data, family = binomial)
tidy(anova(modellg1.final, modellg1, test="Chisq"))
# interaction effects with citric.acid using change in deviance test
modellg2 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*citric.acid + citric.acid*log_sulphates + citric.acid*chloridesCent + citric.acid*free.sulfur.dioxideCent + pHCent*citric.acid, data=data, family = binomial)
tidy(anova(modellg1.final, modellg2, test="Chisq"))
# other possible two-way interaction effects
modellg3 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*log_sulphates + alcoholCent*chloridesCent + alcoholCent*free.sulfur.dioxideCent + pHCent*alcoholCent* + log_sulphates*chloridesCent + log_sulphates*free.sulfur.dioxideCent + log_sulphates*pHCent + chloridesCent*free.sulfur.dioxideCent + chloridesCent*pHCent + free.sulfur.dioxideCent*pHCent, data=data, family = binomial)
tidy(anova(modellg1.final, modellg3, test="Chisq"))
# forward Selection
step(modellg1.null, scope=list(upper=modellg3), direction="forward")
# model based on forward selection
modellg.selected <- glm(formula = quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + citric.acid + pHCent + free.sulfur.dioxideCent + log_sulphates*chloridesCent + log_sulphates*pHCent + alcoholCent*free.sulfur.dioxideCent + log_sulphates*free.sulfur.dioxideCent + pHCent*free.sulfur.dioxideCent, family = binomial, data = data)
summary(modellg.selected)
# view the selected model
kable(tidy(modellg.selected))
# final logistic regression model with interaction effects
modellg.final <- glm(formula = quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + citric.acid + pHCent + free.sulfur.dioxideCent + log_sulphates*pHCent + alcoholCent*free.sulfur.dioxideCent + log_sulphates*free.sulfur.dioxideCent, family = binomial, data = data)
summary(modellg.final)
# view the final logistic regression model with interaction effects
kable(tidy(modellg.final))
# calculate predicted probabilities
data$pred <- predict.glm(modellg.final, type="response")
# calculate residuals of predicted probabilities
data$res <- residuals.glm(modellg.final, type="response")
# binned residual plots
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$log_sulphates,y=data$res,xlab="log_sulphates")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
binnedplot(x=data$pHCent,y=data$res,xlab="pHCent")
# use AV Plot to identify problematic observations
avPlots(modellg.final)
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
library("tsne")
# use AV Plot to identify problematic observations
avPlots(modellg.final)
knitr::opts_chunk$set(echo = TRUE)
library("cowplot")
library("dplyr")
library("ggplot2")
library("broom")
library("knitr")
library("readr")
library("arm")
library("olsrr")
library("dplyr")
library("car")
library("pROC")
library("tibble")
library("nnet")
library("tidyr")
library("MASS")
library("caret")
library("AER")
library("tsne")
# input data source
data <- read.csv("./redwine_quality.csv")
# overview of the dataset
glimpse(data)
# convert quality into factor variable
data <- data %>% mutate(quality = as.factor(quality))
# duplicate quality for ordinal regresison
data <- data %>% mutate(quality_dup = as.factor(quality))
# scatter plot matrix one
pairs(quality ~ fixed.acidity + volatile.acidity + citric.acid + density + residual.sugar + chlorides, data=data)
# correlation coefficients for potential multicollinearity
cor(data$fixed.acidity, data$citric.acid)
cor(data$fixed.acidity, data$density)
cor(data$volatile.acidity, data$citric.acid)
cor(data$density, data$residual.sugar)
# scatter plot matrix two
pairs(quality ~ free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol, data=data)
# correlation coefficients for potential multicollinearity
cor(data$free.sulfur.dioxide, data$total.sulfur.dioxide)
# distribution of each variable
p1  <- ggplot(data = data, aes(x = quality) ) + geom_histogram(stat="count",fill= "lightblue")
p2  <- ggplot(data = data, aes(x = volatile.acidity) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p3  <- ggplot(data = data, aes(x = citric.acid) ) + theme(axis.text=element_text(size=7)) + geom_histogram(fill= "lightblue")
p4  <- ggplot(data = data, aes(x = residual.sugar) ) + geom_histogram(fill= "lightblue")
p5  <- ggplot(data = data, aes(x = chlorides) ) + theme(axis.text=element_text(size=11)) + geom_histogram(fill= "lightblue")
p6  <- ggplot(data = data, aes(x = free.sulfur.dioxide) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p7  <- ggplot(data = data, aes(x = density) ) + theme(axis.text=element_text(size=7.5)) + geom_histogram(fill= "lightblue")
p8 <- ggplot(data = data, aes(x = pH) ) + geom_histogram(fill= "lightblue")
p9 <- ggplot(data = data, aes(x = sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
p10 <- ggplot(data = data, aes(x = alcohol) ) + geom_histogram(fill= "lightblue")
plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,ncol=4,nrow=3)
# log transform sulphates
data <- data %>% mutate(log_sulphates = log(sulphates))
# distribution of the log transformed sulphates
ggplot(data = data, aes(x = log_sulphates) ) + theme(axis.text=element_text(size=9)) + geom_histogram(fill= "lightblue")
# summary statistics of each variable
summary(data)
# makes quality==5 the reference level
data <- data %>% mutate(quality = relevel(quality, ref=5))
# add mean-centered numerical variables besides citric.acid
data <- data %>%
mutate(volatile.acidityCent = volatile.acidity-mean(volatile.acidity),
residual.sugarCent = residual.sugar-mean(residual.sugar),
chloridesCent = chlorides-mean(chlorides),
free.sulfur.dioxideCent = free.sulfur.dioxide-mean(free.sulfur.dioxide),
sulphatesCent = sulphates-mean(sulphates),
densityCent = density-mean(density), pHCent = pH-mean(pH),
alcoholCent = alcohol-mean(alcohol))
# transform quality into a binary variable
rawdata <- read.csv("./redwine_quality.csv")
data$quality <- rawdata$quality
data$quality[data$quality < 6] <- 0    # any quality less than 6 is 0 (not good)
data$quality[data$quality >= 6] <- 1   # quality equal to or greater than 6 so 6-10 is 1 (good)
# Model Reduced
modellg1.null <- glm(quality ~ 1, data=data , family=binomial)
# Model Full
modellg1.full <- glm(quality ~ volatile.acidityCent + residual.sugarCent + citric.acid + chloridesCent + free.sulfur.dioxideCent + log_sulphates + densityCent + pHCent + alcoholCent, data=data, family = binomial)
# forward Selection
step(modellg1.null, scope=list(upper=modellg1.full), direction="forward")
# model based on forward selection
modellg1.final <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent, data=data, family = binomial)
summary(modellg1.final)
# view coefficients of the selected model - the final model with main effects
kable(tidy(modellg1.final))
# calculate predicted probabilities
data$pred <- predict.glm(modellg1.final, type="response")
# calculate residuals of predicted probabilities
data$res <- residuals.glm(modellg1.final, type="response")
# binned residual plots
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$log_sulphates,y=data$res,xlab="log_sulphates")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
binnedplot(x=data$pHCent,y=data$res,xlab="pHCent")
# use AV Plot to identify prblematic observations
avPlots(modellg1.final)
# influence points
data <- data %>%
mutate(leverage = hatvalues(modellg1.final),
cooks = cooks.distance(modellg1.final),
stand.resid = rstandard(modellg1.final),
obs.num = row_number())
# Cook's Distance
cutoff <- cooks.distance(modellg1.final)
plot(modellg1.final, which=4, cook.levels=cutoff)
# influence plot
influencePlot(modellg1.final, main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
# leverage threshold
threshold <- 0.05
# leverage and cook's distance plots
p1 <- ggplot(data=data, aes(x=obs.num,y=leverage)) +
geom_point(alpha=0.5) +
geom_hline(yintercept=threshold,color="red")+
labs(x="Observation Number",y="Leverage",title="Leverage")
p2 <- ggplot(data=data, aes(x=obs.num,y=cooks)) +
geom_point() +
geom_hline(yintercept=1,color="red")+
labs(x="Observation Number",y="Cook's Distance",title="Cook's Distance")
plot_grid(p1,p2,ncol = 2)
# multicollinearity
kable(tidy(vif(modellg1.final)))
# ROC Curve
ROC.quality <- roc(data$quality, data$pred, plot=T)
# area under the curve
ROC.quality$auc
# interaction effects with volatile.acidityCent using change in deviance test
# the final logistic regression model
modellg1.final <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent, data=data, family = binomial)
# new model for two-way interaction effects with volatile.acidityCent
modellg1 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*volatile.acidityCent + volatile.acidityCent*log_sulphates + volatile.acidityCent*chloridesCent + volatile.acidityCent*free.sulfur.dioxideCent + volatile.acidityCent*citric.acid + volatile.acidityCent*pHCent, data=data, family = binomial)
tidy(anova(modellg1.final, modellg1, test="Chisq"))
# interaction effects with citric.acid using change in deviance test
modellg2 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*citric.acid + citric.acid*log_sulphates + citric.acid*chloridesCent + citric.acid*free.sulfur.dioxideCent + pHCent*citric.acid, data=data, family = binomial)
tidy(anova(modellg1.final, modellg2, test="Chisq"))
# other possible two-way interaction effects
modellg3 <- glm(quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + free.sulfur.dioxideCent + citric.acid + pHCent + alcoholCent*log_sulphates + alcoholCent*chloridesCent + alcoholCent*free.sulfur.dioxideCent + pHCent*alcoholCent* + log_sulphates*chloridesCent + log_sulphates*free.sulfur.dioxideCent + log_sulphates*pHCent + chloridesCent*free.sulfur.dioxideCent + chloridesCent*pHCent + free.sulfur.dioxideCent*pHCent, data=data, family = binomial)
tidy(anova(modellg1.final, modellg3, test="Chisq"))
# forward Selection
step(modellg1.null, scope=list(upper=modellg3), direction="forward")
# model based on forward selection
modellg.selected <- glm(formula = quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + citric.acid + pHCent + free.sulfur.dioxideCent + log_sulphates*chloridesCent + log_sulphates*pHCent + alcoholCent*free.sulfur.dioxideCent + log_sulphates*free.sulfur.dioxideCent + pHCent*free.sulfur.dioxideCent, family = binomial, data = data)
summary(modellg.selected)
# view the selected model
kable(tidy(modellg.selected))
# final logistic regression model with interaction effects
modellg.final <- glm(formula = quality ~ alcoholCent + volatile.acidityCent + log_sulphates + chloridesCent + citric.acid + pHCent + free.sulfur.dioxideCent + log_sulphates*pHCent + alcoholCent*free.sulfur.dioxideCent + log_sulphates*free.sulfur.dioxideCent, family = binomial, data = data)
summary(modellg.final)
# view the final logistic regression model with interaction effects
kable(tidy(modellg.final))
# calculate predicted probabilities
data$pred <- predict.glm(modellg.final, type="response")
# calculate residuals of predicted probabilities
data$res <- residuals.glm(modellg.final, type="response")
# binned residual plots
binnedplot(x=data$pred,y=data$res,xlab="Predict")
binnedplot(x=data$alcoholCent,y=data$res,xlab="alcoholCent")
binnedplot(x=data$volatile.acidityCent,y=data$res,xlab="volatile.acidityCent")
binnedplot(x=data$log_sulphates,y=data$res,xlab="log_sulphates")
binnedplot(x=data$chloridesCent,y=data$res,xlab="chloridesCent")
binnedplot(x=data$free.sulfur.dioxideCent,y=data$res,xlab="free.sulfur.dioxideCent")
binnedplot(x=data$citric.acid,y=data$res,xlab="citric.acid")
binnedplot(x=data$pHCent,y=data$res,xlab="pHCent")
# use AV Plot to identify problematic observations
avPlots(modellg.final)
